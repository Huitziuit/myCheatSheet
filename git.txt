-SETUP

git config --global user.name "[name]"
git config --global user.email "[email]"
git config --global core.editor [editor emacs]
git config --list
-----------------------------------------------------------------
-IGNORE
.gitignore 
*.[typeFile]		//ignore files.[typeFile]
![file.typeFile]	//dont ignore [file.typeFile]
[dir]/			//ignore all files in [dir]
[dir]/*.[typeFile]	//ignore [dir]/files.[typeFile]
			//not ignore [dir]/dir2/files.[typeFile]
[dir]/**/*.[typeFile]	//ignore all files.[typeFile] recursively
	
------------------------------------------------------------------
-INIT

echo "# myCheatSheet" >> README.md
git init
git clone [url]
-----------------------------------------------------------------
-STAGE

git status
git add [file]
git diff             //diff of what is changed but not staged
git diff --staged    //diff of what is staged but not yet commited

------------------------------------------------------------------
COMMITS

git commit -m "[descriptive message]"
git --amend	//replace previous commit 
---------------------------------------------------------------------
-HISTORY

git log		//show all commits in the current branch's history
	--oneline	//7 digits of hash and commit in one line
	-p	//show changes of each of the commits 
	-2	//show two last commits
	--stat	//show statics 
	--graph //show graphics of braches in history

---------------------------------------------------------------------
-RECOVERY

git checkout -- [file]	//recovery file to its state in the last commit
 
---------------------------------------------------------------------
-REMOTS (default origin)

git remote -v			//list of remots
git remote show [nameRemote]	//inspect a remote
git add [nameRemote] [url]	//add remote
git remote rename [nameRemote] [newNameRemote]	//rename remote
git remote rm [nameRemote]	//delete remote

git fetch [nameRemote]		// fetch toward [nameRemote] 

git clone [url]		//by default syncs the master branch of the 
			//local repo with the remote repo

git push [nameRemote] [nameBranch]	//send to my remote

---------------------------------------------------------------------
-TAGS

[version]				//the format is v0.1 v1.3 v1.4-lw
git tag [version]			//lightweight tag 
git tag -a [version] -m "[message]"	//annotated tag, more info 
git show [version]			//show info of version
git tag -a [version] [oneline]		//late tagging

//default, push does not transfer tags to remote servers 
git push [remote] [version] --tags	//send all tags to remote server

git checkout -b [newBranch] [version]	//set a place version in the 
					//workArea, this is only 
					//possible whith a new branch 


-----------------------------------------------------------------------
-ALIAS
git config --global alias.[alias] [gitCommant]
example: git config --global alias.st status

-----------------------------------------------------------------------
-BRANCH
git branch 			//show my branches
git branch [newBranch]		//create a new branch
git branch -d [branch]		//delete a branch
git checkout [branch]		//jump to [branch]		pointer HEAD -> [branch]
git checkout [branch] -b 	//resume 2 lines up (creaate and jump to new branch)


it log --oneline --decorate --graph --all	//all branches on history 
--------------------------------------------------------------------------
-MERGE
 //to make a merge 
git branch [brach] //main,master 	//	1. jump to branch base
git merge [branch] 			//	2. merge an external branch

HEAD<<<<				//	3. solve conflicts
content1
============
branchExternal>>>>>
content2
...
===========

git branch --merged 		//show branches merged with active branch
[branch1]
[branch2]
[branchN]
*[activeBranch]

git branch --no.merged		//show branches Non merged with active branch
[branch1]
[branchN]

