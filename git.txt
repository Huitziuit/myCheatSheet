-SETUP

git config --global user.name "[name]"
git config --global user.email "[email]"
git config --global core.editor [editor emacs]
git config --list
-----------------------------------------------------------------
-IGNORE
.gitignore 
*.[typeFile]		//ignore files.[typeFile]
![file.typeFile]	//dont ignore [file.typeFile]
[dir]/			//ignore all files in [dir]
[dir]/*.[typeFile]	//ignore [dir]/files.[typeFile]
			//not ignore [dir]/dir2/files.[typeFile]
[dir]/**/*.[typeFile]	//ignore all files.[typeFile] recursively
	
------------------------------------------------------------------
-INIT

echo "# myCheatSheet" >> README.md
git init
git clone [url]
-----------------------------------------------------------------
-STAGE

git status
git add [file]
git diff             //diff of what is changed but not staged
git diff --staged    //diff of what is staged but not yet commited

------------------------------------------------------------------
COMMITS

git commit -m "[descriptive message]"
git --amend	//replace previous commit 
---------------------------------------------------------------------
-HISTORY

git log		//show all commits in the current branch's history
	--oneline	//7 digits of hash and commit in one line
	-p	//show changes of each of the commits 
	-2	//show two last commits
	--stat	//show statics 
	--graph //show graphics of braches in history

---------------------------------------------------------------------
-RECOVERY

git checkout -- [file]	//recovery file to its state in the last commit
 
---------------------------------------------------------------------
-REMOTS (default origin)

git remote -v			//list of remots
git remote show [nameRemote]	//inspect a remote
git add [nameRemote] [url]	//add remote
git remote rename [nameRemote] [newNameRemote]	//rename remote
git remote rm [nameRemote]	//delete remote

git fetch [nameRemote]		// fetch toward [nameRemote] 

git clone [url]		//by default syncs the master branch of the 
			//local repo with the remote repo

git push [nameRemote] [nameBranch]	//send to my remote

---------------------------------------------------------------------
-TAGS

[version]				//the format is v0.1 v1.3 v1.4-lw
git tag [version]			//lightweight tag 
git tag -a [version] -m "[message]"	//annotated tag, more info 
git show [version]			//show info of version
git tag -a [version] [oneline]		//late tagging

//default, push does not transfer tags to remote servers 
git push [remote] [version] --tags	//send all tags to remote server

git checkout -b [newBranch] [version]	//set a place version in the 
					//workArea, this is only 
					//possible whith a new branch 


-----------------------------------------------------------------------
-ALIAS
git config --global alias.[alias] [gitCommant]
example: git config --global alias.st status

-----------------------------------------------------------------------
-BRANCH
git branch 			//show my branches
git branch [newBranch]		//create a new branch
git branch -d [branch]		//delete a branch
git checkout [branch]		//jump to [branch]		pointer HEAD -> [branch]
git checkout [branch] -b 	//resume 2 lines up (creaate and jump to new branch)


it log --oneline --decorate --graph --all	//all branches on history 

git branch -v 			//all branches and last commint for each one

git branch --merged 		//show branches merged with active branch
[branch1]
[branch2]
[branchN]
*[activeBranch]

git branch --no.merged		//show branches Non merged with active branch
[branch1]
[branchN]
--------------------------------------------------------------------------
-MERGE
 //to make a merge 
git branch [brach] //main,master 	//	1. jump to branch base
git merge [branch] 			//	2. merge an external branch

HEAD<<<<				//	3. solve conflicts
content1
============
branchExternal>>>>>
content2
...
===========

git branch --merged 		//show branches merged with active branch
[branch1]
[branch2]
[branchN]
*[activeBranch]

git branch --no.merged		//show branches Non merged with active branch
[branch1]
[branchN]
-----------------------------------------------------------------------------
-FETCH 
git fetch [remote]					//Update remote branches info [remote]/[masterBranch] example: origin/master
git fetch --all						//Update all remotes info

//git fetch returns server branches but this branches are no editables
git merge [remote]/[remoteBranch]			//for merge localBranch with remote branches example: git merge origin/test
git checkout -b nameNewBranch [remote]/[remoteBranch]		//make a branch based in remote branch (this branch can edit)


-----------------------------------------------------------------------------
-PUBLISH
git push [remote] [branch]	//publish local brach with remote branch, (make and update) or (onli update) remote branch
git push [remote] [branch:branch]	//equals to up line

git push [remote] [localBranch:remoteBranch] 	//when local and remote branch use diferent name 

-----------------------------------------------------------------------------
-Follow to the Branches (Remote branches)
git checkout -b nameNewBranch [remote]/[remoteBranch]		//make a local branch based in remote branch (this local branch can edit and syncronous with remote branch)
git checkout --track [origin]/[remoteBranch]	//equal to up line, if local and remote name of the branches is the same

//if i have a local branch and i like connect (syncronize) local branch with a remote branch (-u or --set-upstream-to configure you local branch) 
git push -u [remote] [remoteBranch]			//make or update remote branch, and syncronize local and remote branch  

git fetch --all						//Update all remotes info
git branch -vv						//Show branches and and show who you follow

git push [remote] --delete [remoteBranch]

-----------------------------------------------------------------------------
-REBASE 

git rebase [baseBranch]

//1. set externalBranch
//2. rebase with baseBranch
//3. Change a baseBranch 
//4. Merge with externalBranch (rebase)

//example 
git checkout experiment
git rebase master
git checkout master
git merge experiment

NEVER USE REBASE ON PUBLIC REPOSITORY

-----------------------------------------------------------------------------
